{
	"info": {
		"_postman_id": "255190a5-4d88-40a6-8e3d-3f3185142462",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20126944"
	},
	"item": [
		{
			"name": "Task_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Задача выполнена!\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200:\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в \r",
							"var checking = pm.response.json();\r",
							"//   var checking = JSON.parse(responseBody);\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Body matches name\", function () {\r",
							"    pm.expect(checking.name).to.eql(\"Maryna\");\r",
							"});\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками)\r",
							"pm.test(\"Body matches age\", function () {\r",
							"    pm.expect(checking.age).to.eql(\"23\");\r",
							"});\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Body matches salary\", function () {\r",
							"    pm.expect(checking.salary).to.eql(1200);\r",
							"});\r",
							"// Спарсить request.\r",
							" let req = request.data;\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							" pm.test(\"Checking name\", function () {\r",
							"     pm.expect(checking.name).to.eql(req.name);\r",
							" });\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							" pm.test(\"Checking age\", function () {\r",
							"     pm.expect(checking.age).to.eql(req.age);\r",
							" });\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							" pm.test(\"Checking salary\", function () {\r",
							"     pm.expect(checking.salary).to.eql(+req.salary);\r",
							" });\r",
							"// Вывести в консоль параметр family из response.\r",
							"let resp_family = checking.family\r",
							"console.log(\"family = \" , resp_family)\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"var salary = req.salary\r",
							"   pm.test(\"Checking u_salary_1_5_year\", function () {\r",
							"     pm.expect(checking.family.u_salary_1_5_year).to.eql(salary*4);\r",
							"   });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Maryna",
							"type": "text"
						},
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1200",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"  var checking = JSON.parse(responseBody);\r",
							"// 4. Спарсить request.\r",
							" var req_checking = pm.request.url.query.toObject();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							" pm.test(\"Checking name\", function () {\r",
							"     pm.expect(checking.name).to.eql(req_checking.name);\r",
							" });\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							" pm.test(\"Checking age\", function () {\r",
							"     pm.expect(checking.age).to.eql(req_checking.age);\r",
							" });\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							" pm.test(\"Checking salary\", function () {\r",
							"     pm.expect(checking.salary).to.eql(+req_checking.salary);\r",
							" });\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"let resp_family = checking.family\r",
							"console.log(\"family = \" , resp_family)\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog has name\", function () {\r",
							"    pm.response.to.have.jsonBody(\"family.pets.dog.name\");\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog has age\", function () {\r",
							"    pm.response.to.have.jsonBody(\"family.pets.dog.age\");\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Checking dog's name\", function () {\r",
							"     pm.expect(checking.family.pets.dog.name).to.eql(\"Luky\");\r",
							" });\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Checking dog's age\", function () {\r",
							"     pm.expect(checking.family.pets.dog.age).to.eql(4);\r",
							" });"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Maryna&age=23&salary=400",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Maryna"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "400"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"  var checking = JSON.parse(responseBody);\r",
							"// 4. Спарсить request.\r",
							" var req_checking = pm.request.url.query.toObject();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							" pm.test(\"Checking name\", function () {\r",
							"     pm.expect(checking.name).to.eql(req_checking.name);\r",
							" });\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							" pm.test(\"Checking age\", function () {\r",
							"     pm.expect(checking.age).to.eql(+req_checking.age);\r",
							" });\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"let req_salary = req_checking.salary\r",
							"console.log(\"salary =\" +req_salary)\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"let resp_salary = checking.salary\r",
							"console.log(\"salary: \" , resp_salary)\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"0-й элемент параметра salary: \" +resp_salary[0]);\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"1-й элемент параметра salary: \" +resp_salary[1]);\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"2-й элемент параметра salary: \" +resp_salary[2]);\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"   pm.test(\"Checking_1\", function () {\r",
							"     pm.expect(resp_salary[0]).to.eql(+req_salary);\r",
							"   });\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"   pm.test(\"Checking_2\", function () {\r",
							"     pm.expect(+resp_salary[1]).to.eql(req_salary*2);\r",
							"   });\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"   pm.test(\"Checking_3\", function () {\r",
							"     pm.expect(+resp_salary[2]).to.eql(req_salary*3);\r",
							"   });\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную \r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"Name\", req_checking.name);\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"Age\", req_checking.age);\r",
							"// 20. Передать в окружение переменную \r",
							"pm.environment.set(\"Salary\", req_checking.salary);\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var arr_len = checking.salary.length;\r",
							"// for (var i = 0; i < arr_len; i++){\r",
							"//     console.log(\"salary \", i+1, checking.salary[i]);\r",
							"// }\r",
							"var count = 1;\r",
							"for (var i of checking.salary){\r",
							"    console.log(count, \"salary \", i)\r",
							"    count++\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Maryna&age=23&salary=400",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Maryna"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "400"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"  var checking = JSON.parse(responseBody);\r",
							"// 7. Спарсить request.\r",
							" let req = request.data;\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json response has start_qa_salary\", function () {\r",
							"    pm.expect(checking).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json response has qa_salary_after_6_months\", function () {\r",
							"    pm.expect(checking).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json response has qa_salary_after_12_months\", function () {\r",
							"    pm.expect(checking).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"json response has qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(checking).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json response has qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(checking).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"json response has person\", function () {\r",
							"    pm.expect(checking).to.have.property(\"person\");\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							" pm.test(\"Checking start_qa_salary\", function () {\r",
							"     pm.expect(checking.start_qa_salary).to.eql(+req.salary);\r",
							" });\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							" pm.test(\"Checking qa_salary_after_6_months\", function () {\r",
							"     pm.expect(checking.qa_salary_after_6_months).to.eql(+req.salary*2);\r",
							" });\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							" pm.test(\"Checking qa_salary_after_12_months\", function () {\r",
							"     pm.expect(checking.qa_salary_after_12_months).to.eql(+req.salary*2.7);\r",
							" });\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"// var salary_1 = checking.qa_salary_after_1.5_year;\r",
							" pm.test(\"Checking qa_salary_after_1.5_year\", function () {\r",
							"     pm.expect(checking[\"qa_salary_after_1.5_year\"]).to.eql(+req.salary*3.3);\r",
							" });\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							" pm.test(\"Checking qa_salary_after_3.5_years\", function () {\r",
							"     pm.expect(checking[\"qa_salary_after_3.5_years\"]).to.eql(+req.salary*3.8);\r",
							" });\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							" pm.test(\"Checking u_name's salary\", function () {\r",
							"     pm.expect(checking.person.u_name[1]).to.eql(+req.salary);\r",
							" });\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							" pm.test(\"Checking u_age\", function () {\r",
							"     pm.expect(checking.person.u_age).to.eql(+req.age);\r",
							" });\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							" pm.test(\"Checking u_salary_5_years\", function () {\r",
							"     pm.expect(checking.person.u_salary_5_years).to.eql(+req.salary*4.2);\r",
							" });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{Name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{Age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{Salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}